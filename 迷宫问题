#include <iostream>
#include <vector>
using namespace std;

int n,m;
vector<vector<int>> maze;
vector<vector<int>> path_best;
vector<vector<int>> path_test;

void mazeTrack(int x, int y)
{
    maze[x][y]=1;
    path_test.push_back({x,y});
    if(x==n-1 && y==m-1){
        if(path_best.empty() || path_test.size() < path_best.size())
            path_best = path_test;
    }
    if (x - 1 >= 0 && maze[x - 1][y] == 0)//探索向上走是否可行
        mazeTrack(x - 1, y);
    if (x + 1 < n && maze[x + 1][y] == 0)//探索向下走是否可行
        mazeTrack(x + 1, y);
    if (y - 1 >= 0 && maze[x][y - 1] == 0)//探索向左走是否可行
        mazeTrack(x, y - 1);
    if (y + 1 < m && maze[x][y + 1] == 0)//探索向右走是否可行
        mazeTrack(x, y + 1);
    maze[x][y]=0;
    path_test.pop_back();
}
int main(){
    while(cin>>n>>m){
        maze = vector<vector<int>>(n,vector<int>(m,0));
        path_best.clear();
        path_test.clear();
        for(auto &i : maze)
            for(auto &j : i)
                cin>>j;
        mazeTrack(0,0);
        for(auto i : path_best)
            cout<<"("<<i[0]<<","<<i[1]<<")"<<endl;
        
    }
    return 0;
}
